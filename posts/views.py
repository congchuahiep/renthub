from rest_framework import mixins, parsers, status, viewsets
from rest_framework.decorators import action
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response

from accounts.perms import IsLandlord, IsTenant
from posts import paginators
from posts.models import Comment, RentalPost, RoomSeekingPost
from posts.paginators import PostPaginator
from posts.perms import IsCommentOwner, IsPostOwner
from posts.serializers import (
    CommentSerializer,
    RentalPostSerializer,
    RoomSeekingPostSerializer,
)
from utils.choices import PostStatus

from rest_framework import viewsets
from rest_framework.decorators import action
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from posts.models import Comment
from posts.serializers import CommentSerializer




class CommentActionMixin:

    @action(detail=True, methods=["get", "post"], url_path="comments")
    def comments(self, request, pk=None):
        post = self.get_object()

        if request.method == "GET":
            comments = post.post.comments.select_related("user").filter(active=True, reply_to=None).order_by("-created_date")
            paginator = paginators.CommentPaginator()
            paginated_comments = paginator.paginate_queryset(comments, request)

            serializer = CommentSerializer(paginated_comments, many=True)
            return paginator.get_paginated_response(serializer.data)


        elif request.method == "POST":
            serializer = CommentSerializer(
                data={
                    "content": request.data.get("content"),
                    "user": request.user.pk,
                    "post": pk,
                    "reply_to": request.data.get("reply_to"),  # üëà Th√™m d√≤ng n√†y!
                }
            )
            serializer.is_valid(raise_exception=True)
            comment = serializer.save()
            return Response(CommentSerializer(comment).data, status=status.HTTP_201_CREATED)
    @action(detail=True, methods=["get"], url_path="comments/(?P<comment_id>[^/.]+)/replies")
    def comment_replies(self, request, pk=None, comment_id=None):
        """
        API: GET /rentals/<post_id>/comments/<comment_id>/replies/
        Tr·∫£ v·ªÅ danh s√°ch c√°c comment tr·∫£ l·ªùi cho m·ªôt comment
        """
        post = self.get_object()

        try:
            comment = post.post.comments.get(pk=comment_id, active=True)
        except Comment.DoesNotExist:
            return Response({"detail": "Comment not found."}, status=404)

        replies = comment.replies.select_related("user").filter(active=True).order_by("created_date")
        print(replies)
        serializer = CommentSerializer(replies, many=True)
        return Response(serializer.data)

# Create your views here.
class RentalPostViewSet(
    viewsets.GenericViewSet,
    mixins.ListModelMixin,  # `GET /rentals/`
    mixins.RetrieveModelMixin,  # `GET /rentals/<id>`
    mixins.CreateModelMixin,
    mixins.DestroyModelMixin,
    mixins.UpdateModelMixin,
    CommentActionMixin
):
    """
    ViewSet n√†y cung c·∫•p kh·∫£ nƒÉng qu·∫£n l√Ω c√°c Rental post

    Endpoints
    ---------
    - `GET /rentals/` : Tr·∫£ v·ªÅ danh s√°ch c√°c Rentals post
    - `GET /rentals/<id>` : Tr·∫£ v·ªÅ m·ªôt Rentals post
    - `POST /rentals/` : T·∫°o m·ªõi m·ªôt Rentals post (Ch·ªâ cho ph√©p landlord)
    - `DELETE /rentals/<id>` : Xo√° m·ªôt Rentals post (Ch·ªâ cho ph√©p ch·ªß s·ªü h·ªØu b√†i ƒëƒÉng)
    - `PUT /rentals/<id>` : S·ª≠a to√†n b·ªô m·ªôt Rental post (Ch·ªâ cho ph√©p ch·ªß s·ªü h·ªØu b√†i ƒëƒÉng)
    - `PATCH /rentals/<id>` : S·ª≠a m·ªôt ph·∫ßn Rental post (Ch·ªâ cho ph√©p ch·ªß s·ªü h·ªØu b√†i ƒëƒÉng)
    Qu·∫£n l√Ω comment c·ªßa m·ªôt b√†i vi·∫øt:
    - `GET /rentals/<id>/comments/`: L·∫•y danh s√°ch comment c·ªßa b√†i vi·∫øt
    - `POST /rentals/<id>/comments/`: Th√™m comment v√†o b√†i vi·∫øt
    """

    queryset = RentalPost.objects.prefetch_related(
        "post", "utilities", "owner", "post__images"
    ).filter(
        status=PostStatus.APPROVED
    )  # S·ª≠ d·ª•ng prefetch_related ƒë·ªÉ t·ªëi ∆∞u h√≥a c√¢u truy v·∫•n
    serializer_class = RentalPostSerializer
    pagination_class = PostPaginator
    page_size = 10
    parser_classes = [parsers.MultiPartParser, parsers.FormParser, parsers.JSONParser]

    def get_permissions(self):
        """
        C·∫•u h√¨nh c√°c permission c·ªßa view action:
        - `IsLandlord`: create, POST comments
        - `IsRentalPostOwner`: destroy, update, partial_update
        - Kh√¥ng c√≥ permission: list, retrieve, GET /comments/
        """
        if self.action == "create":
            return [IsLandlord()]
        elif self.action in ["destroy", "update", "partial_update"]:
            return [IsPostOwner()]
        elif self.action == "comments" and self.request.method == "POST":
            return [IsAuthenticated()]
        return [AllowAny()]

    def perform_create(self, serializer):
        """
        Khi th·ª©c hi·ªán ph∆∞∆°ng th·ª©c `create()`, g·∫Øn landlord ƒëang g·ªçi API
        ƒë·ªÉ tr·ªü th√†nh ch·ªß s·ªü h·ªØu c·ªßa b√†i ƒëƒÉng n√†y
        """
        instance = serializer.save(
            owner=self.request.user
        )  # G√°n landlord l√† user hi·ªán t·∫°i
        # Th√™m tin nh·∫Øn th√¥ng b√°o ƒë√£ t·∫°o th√†nh c√¥ng
        serializer.context["detail"] = (
            f"Rental post '{instance.title}' has been created successfully."
        )
        
       

    



class RoomSeekingPostViewSet(
    viewsets.GenericViewSet,
    mixins.ListModelMixin,
    mixins.CreateModelMixin,
    mixins.RetrieveModelMixin,
    mixins.DestroyModelMixin,
    mixins.UpdateModelMixin,
    CommentActionMixin
):
    queryset = RoomSeekingPost.objects.filter(active=True).order_by("-created_date")
    serializer_class = RoomSeekingPostSerializer
    pagination_class = PostPaginator
    page_size = 10
    parser_classes = [parsers.MultiPartParser, parsers.FormParser, parsers.JSONParser]

    def get_permissions(self):
        if self.action == "create":
            return [IsTenant()]
        elif self.action in ["destroy", "update", "partial_update"]:
            return [IsPostOwner()]
        elif self.action == "comments" and self.request.method == "POST":
            return [IsAuthenticated()]
        # else ph·∫ßn comments th·∫±ng Hi·ªáp l√†m th·∫±ng T√≠n ƒë√©o bi·∫øt
        # Hi·ªáp: ch·∫•m h·ªèi =)))?
        return [AllowAny()]

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)

   